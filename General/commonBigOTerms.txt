Notation-------Description-------Example
0(1)           Constant time     Looking up single element in an array      
0(log n)       Logarithmic       Finding an item in a sorted array with binary search
0(n)           Linear Time       Searching an unsorted array for a specific value
0(n log n)     Log-Linear        Complex sorting algorithms like heap sort and merge sort 
0(n^2)         Quadratic         Simple sorting algorithms, such as bubble sort and selection sort, and insertion sort




---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Constant time- 0(1)

x = 5 + (15 * 20);
does not depend on input statement of n

this makes this 0(1)

even if you have 10 lines of expressions like this it will still be the same notation.


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Linear Time- 0(n)

for x in range (0,n)
    print x;

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Quadratic Time - 0(n^2)

for x in range (0,n):
    for y in range (0,n):
        print x*y; 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Challenge 1 - What is the total run time for this block of code

x = 5 + (15 * 20);   0(1)
for x in range (0,n)   0(n)
    print x;
for x in range (0,n):  0(n^2)
    for y in range (0,n):
        print x*y; 


O = 0(1) + 0(n) + 0(n^2)

Since 0(n^2) is greater than the others the entire time is 0(n^2)


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Challenge 2 - What is the total run time for this block of code

if x > 0:
    // 0(1)
else if x < 0:
    // 0(n)
else:
    // 0(n^2)

    The answer for run time is 0(n^2) since we always want to account for the worst case scenario.
    

